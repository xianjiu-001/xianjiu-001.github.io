{"meta":{"title":"仙九Blog","subtitle":"孤岛","description":"本网站是个人兴趣爱好，总结分享经验，记录生活点滴的平台，希望在以后的学习旅途中，走出自己的风景","author":"仙九","url":"http://xianjiu-001.github.io","root":"/"},"pages":[{"title":"404","date":"2021-04-16T05:19:29.000Z","updated":"2021-04-16T05:20:09.083Z","comments":true,"path":"404.html","permalink":"http://xianjiu-001.github.io/404.html","excerpt":"","text":""},{"title":"404","date":"2021-04-16T05:19:29.000Z","updated":"2021-04-16T05:20:09.083Z","comments":true,"path":"404/index.html","permalink":"http://xianjiu-001.github.io/404/index.html","excerpt":"","text":""},{"title":"about","date":"2021-04-16T05:15:30.000Z","updated":"2021-04-18T07:06:58.968Z","comments":true,"path":"about/index.html","permalink":"http://xianjiu-001.github.io/about/index.html","excerpt":"","text":"我的简历仙九 个人概况2020级在校研究生一枚，喜欢钻研一些稀奇古怪的东西 当前所在江西南昌"},{"title":"bangumis","date":"2021-04-16T13:47:05.000Z","updated":"2021-04-16T13:48:50.346Z","comments":true,"path":"bangumis/index.html","permalink":"http://xianjiu-001.github.io/bangumis/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-04-16T05:13:35.000Z","updated":"2021-04-16T05:14:23.417Z","comments":true,"path":"categories/index.html","permalink":"http://xianjiu-001.github.io/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2021-04-16T05:16:16.000Z","updated":"2021-04-16T05:16:37.043Z","comments":true,"path":"contact/index.html","permalink":"http://xianjiu-001.github.io/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2021-04-16T05:16:56.000Z","updated":"2021-04-16T05:17:27.754Z","comments":true,"path":"friends/index.html","permalink":"http://xianjiu-001.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-04-16T05:14:48.000Z","updated":"2021-04-16T05:15:16.834Z","comments":true,"path":"tags/index.html","permalink":"http://xianjiu-001.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Tableau","slug":"Tableau","date":"2021-04-18T13:25:00.000Z","updated":"2021-04-20T05:48:15.711Z","comments":true,"path":"posts/4401.html","link":"","permalink":"http://xianjiu-001.github.io/posts/4401.html","excerpt":"","text":"环形图制作环形图由大小同心圆叠加，小图设置为背景色 使用最小值或者最大值作为行 使用智能显示，去掉大小图中的大小设置 词云图（由气泡图转变为词云图）将气泡形状改为文本瀑布图 选择行列属性，行属性，先按照行属性升序排列，行属性设置为快速表计算——汇总，绘制成条形图，选择甘特条形图 创建计算字段设置为长方形高度，字段值=-[行属性字段] ，放置于大小标记 分析——行总计插入自定义形状需要图片最好.png多维地图 去掉属性分析——聚合度量导入自定义的地理信息导入文件为CSV格式集集合并一定是由同一个维度创造出来的集计算字段按一定类别计算字段{INCLUDE [字段名]: SUM([字段名])}","categories":[{"name":"可视化","slug":"可视化","permalink":"http://xianjiu-001.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"}],"tags":[{"name":"tableau","slug":"tableau","permalink":"http://xianjiu-001.github.io/tags/tableau/"},{"name":"图表","slug":"图表","permalink":"http://xianjiu-001.github.io/tags/%E5%9B%BE%E8%A1%A8/"}],"author":"仙九"},{"title":"Blog美化时间轴","slug":"Blog美化时间轴","date":"2021-04-18T12:25:00.000Z","updated":"2021-04-20T05:45:27.184Z","comments":true,"path":"posts/9600.html","link":"","permalink":"http://xianjiu-001.github.io/posts/9600.html","excerpt":"","text":"2021-4-18添加自动生成类别原文链接 不同终端的字体自适应原文链接 趣味标题修改原文链接 &lt;!--浏览器搞笑标题--> &lt;script> var OriginTitle = document.title; var titleTime; document.addEventListener('visibilitychange', function () { if (document.hidden) { $('[rel=\"icon\"]').attr('href', \"https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/favicon.png\"); document.title = 'ヽ(●-`Д´-)ノ你要玩捉迷藏嘛'; clearTimeout(titleTime); } else { $('[rel=\"icon\"]').attr('href', \"https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/favicon.png\"); document.title = 'ヾ(Ő∀Ő3)ノ好哦！' + OriginTitle; titleTime = setTimeout(function () { document.title = OriginTitle; }, 2000); } }); &lt;/script> 增加科技线条&lt;!--动态线条背景，添加在文件的body标签中，这一点要注意--> &lt;script type=\"text/javascript\" color=\"122 103 238\" opacity='0.7' zIndex=\"-2\" count=\"200\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"> &lt;/script> 看板娘位置调整直接在根目录下的_config.yml中将属性 position: left live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false log: false model: use: live2d-widget-model-shizuku display: position: left width: 150 height: 300 mobile: show: true react: opacity: 0.7 2020-4-19图床picgo+github pages构建图床功能加速访问速度 https://yafine-blog.cn/posts/4e9b.html 文章写作 美化修改 https://blog.csdn.net/gongch0604/article/details/100729421 https://yafine-blog.cn/posts/4ab2.html http://luckyzmj.cn/posts/1d6f1579.html 图片懒加载参考来源 ：sky03大佬 全局字体更换 造字工房查找好看且使用的字体，下载下来，存放到博客根目录下的source/font文件目录下 找到主题文件夹下的代码my.css（在./themes/matery/source/css文件夹中) @font-face{ font-family: 'myFont'; src: url('../font/myFont.ttf'); } body{ font-family: 'myFont'; } 参考来源：过客～励む大佬的博客","categories":[{"name":"时光轴","slug":"时光轴","permalink":"http://xianjiu-001.github.io/categories/%E6%97%B6%E5%85%89%E8%BD%B4/"}],"tags":[{"name":"个人blog","slug":"个人blog","permalink":"http://xianjiu-001.github.io/tags/%E4%B8%AA%E4%BA%BAblog/"},{"name":"Matery","slug":"Matery","permalink":"http://xianjiu-001.github.io/tags/Matery/"},{"name":"Hexo","slug":"Hexo","permalink":"http://xianjiu-001.github.io/tags/Hexo/"}]},{"title":"Scrapy爬虫框架","slug":"Scrapy爬虫","date":"2021-04-18T12:25:00.000Z","updated":"2021-04-20T05:49:02.816Z","comments":true,"path":"posts/b2a.html","link":"","permalink":"http://xianjiu-001.github.io/posts/b2a.html","excerpt":"","text":"安装pip install scrapy 错误1：Twisted安装失败 ，手动安装Twisted 错误2：win32报警， pip install pywin32新建项目scrapy startproject 域名+Spider爬虫爬虫创建 项目文件目录（带有.cfg文件）下进入cmd命令行并输入：scrapy genspider 爬虫名字（去Spider后缀） 网站域名 爬虫名字不要和项目名字一样 网站域名是允许爬虫采集的域名 修改setting.py中的ROBOTSTXT属性，改为False 修改setting.py中request headers爬虫文件```-- coding：utf-8 --import scrapy class BaiduSpider(scrapy.Spider): name = ‘baidu’ # 爬虫名字 allowed_domains = [‘baidu.com’] # 允许采集域名 start_urls = [‘http://baidu.com/'] # 起始URL def parse(self, response): # 解析数据，提取数据 pass ### 爬虫运行 scrapy crawl 爬虫名字 ## 解析网页 ### 提取数据 ```python response.xpath(xpath语法).get() get() 返回一个值 getall() 0返回多个值","categories":[{"name":"python","slug":"python","permalink":"http://xianjiu-001.github.io/categories/python/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://xianjiu-001.github.io/tags/%E7%88%AC%E8%99%AB/"},{"name":"Scrapy框架","slug":"Scrapy框架","permalink":"http://xianjiu-001.github.io/tags/Scrapy%E6%A1%86%E6%9E%B6/"}],"author":"仙九"},{"title":"三壶谜题","slug":"三壶谜题","date":"2021-04-15T12:46:25.000Z","updated":"2021-04-20T05:47:16.768Z","comments":true,"path":"posts/fa62.html","link":"","permalink":"http://xianjiu-001.github.io/posts/fa62.html","excerpt":"","text":"有一个充满水的8品脱的水壶和两个空水壶（容积分别是5品脱和3品脱）。通过将水壶完全倒满水和将水壶的水完全倒空这两种方式，在其中的一个水壶中得到4品脱的水。 一、算法思想算法分析 采用的算法思想是将某个时刻水壶中水的数量看作一个状态，用一个长度为3的数组表示。 初始状态便为[8,0,0],再拓展他的下一结点的可能结构。 若下一结点的结构已经被拓展过了便放弃，若没有拓展过则加入拓展列表（open_list）中。然后递归上述操作。 直到拓展列表（open_list）为空或者找到目标为止。 思想图解这里的第一个数就代表着是那个8品脱的瓶子，依次分别是8品脱，5品脱，3品脱使用层次遍历一次一次递归扩展新的结点，知道找到4品脱的水或者无结点可扩展为止（类似于广度优先遍历）。 二、代码展示1.创建树节点结构节点包括两个属性，一个属性是数组类型的，存储当前三个水壶的容量状态，另一个属性是记录它是由哪个结点扩展过来的，以便找到解决路径： class node: # 创建树节点 def __init__(self, data): self.data = data # 存储三个壶的容量状态 self.per = None # 存储上一时刻三个壶的容量状态 2.实现倾倒动作由于这里只有三个壶，互相倾倒的方案可以枚举出来，所有我就没使用二重嵌套循环，而是使用一层循环： def pour(n): # 扩展子节点 r_list = n.data # 记录当前三个水壶的容量状态 max_list = [8, 5, 3] # 水壶的最大容量 for i, j in ((0, 1), (0, 2), (1, 2), (1, 0), (2, 0), (2, 1)): if r_list[i] != 0: n_list = r_list.copy() # 初始化下一结点的水壶状态 if r_list[i] + r_list[j] > max_list[j]: n_list[i] = r_list[i] - (max_list[j] - r_list[j]) n_list[j] = max_list[j] else: n_list[j] = r_list[i] + r_list[j] n_list[i] = 0 flag = True # 记录水壶的状态是否已经发生过（扩展过） for one in closed_list: if one.data == n_list: # 比较当前水壶状态和以往记录过得水壶状态 flag = False if flag: print(\"扩展的新节点是：\",n_list) new_node = node(n_list) # 创建新节点存储水壶的新状态 new_node.per = n open_list.append(new_node) 主递归函数查看当前是否已经扩展到4品脱的水或者是否还有结点可以扩展。 def BFS_node(root_1): # 递归查找子节点的扩展状态以及查验是否找到4品脱的水壶 n = root_1 print(\"当前节点：\",n.data) if open_list is None: return \"没有找到4品脱的水\" nodelist = n.data if 4 in nodelist: print(\"找到了4品脱的水\") print_node(n) return \"找到了4品脱的水\" closed_list.append(open_list.pop(0)) pour(n) print(\"*******\") BFS_node(open_list[0]) 数据初始化数据初始化，以及找到4品脱水后打印路径的打印函数。 def print_node(n): # 打印正确的水壶操作路径 if n.per == None: return \"\" print(n.data) print_node(n.per) # 初始化数据 root = node([8, 0, 0]) open_list = [root] # 存储已找到却未被扩展的子节点 closed_list = [] # 存储已找到且被扩展的子节点 BFS_node(open_list[0]) 总结主要是用广度优先遍历的思想和树结构，当然如果不在意找到4品脱的水的路径，其实没必要使用树结构。另外打印函数是从最后一层依次往上回溯的，所以显示的是倒序的路径。如果需要变成正向的话，可以加一个栈来实现。这里我就不自己实现了。初学者，学艺不精，如有不足，还请多多指教。","categories":[{"name":"算法小题","slug":"算法小题","permalink":"http://xianjiu-001.github.io/categories/%E7%AE%97%E6%B3%95%E5%B0%8F%E9%A2%98/"}],"tags":[{"name":"类","slug":"类","permalink":"http://xianjiu-001.github.io/tags/%E7%B1%BB/"},{"name":"广度优先遍历","slug":"广度优先遍历","permalink":"http://xianjiu-001.github.io/tags/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"},{"name":"递归","slug":"递归","permalink":"http://xianjiu-001.github.io/tags/%E9%80%92%E5%BD%92/"}]}],"categories":[{"name":"可视化","slug":"可视化","permalink":"http://xianjiu-001.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"name":"时光轴","slug":"时光轴","permalink":"http://xianjiu-001.github.io/categories/%E6%97%B6%E5%85%89%E8%BD%B4/"},{"name":"python","slug":"python","permalink":"http://xianjiu-001.github.io/categories/python/"},{"name":"算法小题","slug":"算法小题","permalink":"http://xianjiu-001.github.io/categories/%E7%AE%97%E6%B3%95%E5%B0%8F%E9%A2%98/"}],"tags":[{"name":"tableau","slug":"tableau","permalink":"http://xianjiu-001.github.io/tags/tableau/"},{"name":"图表","slug":"图表","permalink":"http://xianjiu-001.github.io/tags/%E5%9B%BE%E8%A1%A8/"},{"name":"个人blog","slug":"个人blog","permalink":"http://xianjiu-001.github.io/tags/%E4%B8%AA%E4%BA%BAblog/"},{"name":"Matery","slug":"Matery","permalink":"http://xianjiu-001.github.io/tags/Matery/"},{"name":"Hexo","slug":"Hexo","permalink":"http://xianjiu-001.github.io/tags/Hexo/"},{"name":"爬虫","slug":"爬虫","permalink":"http://xianjiu-001.github.io/tags/%E7%88%AC%E8%99%AB/"},{"name":"Scrapy框架","slug":"Scrapy框架","permalink":"http://xianjiu-001.github.io/tags/Scrapy%E6%A1%86%E6%9E%B6/"},{"name":"类","slug":"类","permalink":"http://xianjiu-001.github.io/tags/%E7%B1%BB/"},{"name":"广度优先遍历","slug":"广度优先遍历","permalink":"http://xianjiu-001.github.io/tags/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"},{"name":"递归","slug":"递归","permalink":"http://xianjiu-001.github.io/tags/%E9%80%92%E5%BD%92/"}]}